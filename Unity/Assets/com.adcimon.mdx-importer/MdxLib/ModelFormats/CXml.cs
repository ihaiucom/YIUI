using System;
using System.IO;
using System.Text;
using System.Xml;
using MdxLib.Model;
using MdxLib.ModelFormats.Xml;

namespace MdxLib.ModelFormats
{
	/// <summary>
	/// Handles the XML model format. Can load and save XML models.
	/// </summary>
	public sealed class CXml : IModelFormat
	{
		/// <summary>
		/// Default constructor.
		/// </summary>
		public CXml()
		{
		}

		/// <summary>
		/// Loads a model from a stream.
		/// </summary>
		/// <param name="Name">The name of the model (only used in some error messages)</param>
		/// <param name="Stream">The stream to load from (must support reading)</param>
		/// <param name="Model">The model to load to (must be an empty model)</param>
		public void Load(string Name, Stream Stream, MdxLib.Model.CModel Model)
		{
			if (!Stream.CanRead)
			{
				throw new NotSupportedException("Unable to load \"" + Name + "\", the stream does not support reading!");
			}
			using XmlTextReader reader = new XmlTextReader(Stream);
			XmlDocument xmlDocument = new XmlDocument();
			xmlDocument.Load(reader);
			XmlNode xmlNode = xmlDocument.SelectSingleNode("model");
			if (xmlNode == null)
			{
				throw new Exception("Unable to load \"" + Name + "\", could not find the root node!");
			}
			CLoader cLoader = new CLoader(Name);
			MdxLib.ModelFormats.Xml.CModel.Instance.Load(cLoader, xmlNode, Model);
			cLoader.Attacher.Attach();
		}

		/// <summary>
		/// Saves a model to a stream.
		/// </summary>
		/// <param name="Name">The name of the model (only used in some error messages)</param>
		/// <param name="Stream">The stream to save to (must support writing)</param>
		/// <param name="Model">The model to save from</param>
		public void Save(string Name, Stream Stream, MdxLib.Model.CModel Model)
		{
			if (!Stream.CanWrite)
			{
				throw new NotSupportedException("Unable to load \"" + Name + "\", the stream does not support writing!");
			}
			using XmlTextWriter xmlTextWriter = new XmlTextWriter(Stream, CConstants.TextEncoding);
			XmlDocument xmlDocument = new XmlDocument();
			xmlTextWriter.Formatting = Formatting.Indented;
			xmlTextWriter.WriteStartDocument();
			xmlTextWriter.WriteComment(BuildHeader(Name));
			XmlNode xmlNode = xmlDocument.CreateElement("model");
			xmlDocument.AppendChild(xmlNode);
			CSaver saver = new CSaver(Name);
			MdxLib.ModelFormats.Xml.CModel.Instance.Save(saver, xmlNode, Model);
			xmlDocument.Save(xmlTextWriter);
		}

		private string BuildHeader(string Name)
		{
			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.AppendLine("");
			stringBuilder.AppendLine("+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			stringBuilder.AppendLine("|");
			stringBuilder.AppendLine("| " + Name.Replace("\n", "").Replace("\r", ""));
			stringBuilder.AppendLine("| Generated by MdxLib v1.04 (written by Magnus Ostberg, aka Magos)");
			stringBuilder.AppendLine("| " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
			stringBuilder.AppendLine("| http://www.magosx.com");
			stringBuilder.AppendLine("|");
			stringBuilder.AppendLine("+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			return stringBuilder.ToString();
		}
	}
}
